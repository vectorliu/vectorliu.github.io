<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[算法-字符串模糊匹配-Google kickstart2017 Round A - Problem B]]></title>
      <url>http://vectorliu.com/2017/03/06/algorithm-google-kickstart2017-roundA-problemB/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个字符串，判断两个字符串是否匹配。字符串中出现的“*”可以匹配0-4个任意字符。比如如下输入样例：<br><a id="more"></a> </p>
<blockquote>
<p>3<br>****<br>It<br>Shakes*e<br>S*speare<br>Shakes*e<br>*peare</p>
</blockquote>
<p>对应的输出为：</p>
<blockquote>
<p>Case #1: TRUE<br>Case #2: TRUE<br>Case #3: FALSE</p>
</blockquote>
<h2 id="可能解法"><a href="#可能解法" class="headerlink" title="可能解法"></a>可能解法</h2><p>解决思路如下：</p>
<ol>
<li>将原始字符串进行扩展，一个“*”替换成“****”;</li>
<li>建立二维数组match[i][j]，表示第一个字符串的[0,i]子串与第二个字符串的[0,j]是否匹配；</li>
<li>动态规划求解，数组match的最后一个元素表示了是否匹配。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> Case = <span class="number">1</span>; Case &lt;= T; Case++) &#123;</div><div class="line">        <span class="built_in">string</span> first;</div><div class="line">        <span class="built_in">string</span> second;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; first;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; second;</div><div class="line">        <span class="built_in">string</span> firstc;</div><div class="line">        <span class="built_in">string</span> secondc;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; first.size();i++)&#123;</div><div class="line">            <span class="keyword">if</span> (first[i] == <span class="string">'*'</span>)</div><div class="line">                firstc += <span class="string">"****"</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                firstc += first[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; second.size();i++)&#123;</div><div class="line">            <span class="keyword">if</span> (second[i] == <span class="string">'*'</span>)</div><div class="line">                secondc += <span class="string">"****"</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                secondc += second[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = firstc.size();</div><div class="line">        <span class="keyword">int</span> n = secondc.size();</div><div class="line">        <span class="keyword">int</span> match[m+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">        match[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= m;i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>)&#123;</div><div class="line">                    match[i][j] = match[i<span class="number">-1</span>][j<span class="number">-1</span>] &amp;&amp; (firstc[i] == <span class="string">'*'</span> || secondc[j] == <span class="string">'*'</span> || firstc[i] == secondc[j]);</div><div class="line">                    <span class="keyword">if</span>(firstc[i<span class="number">-1</span>] == <span class="string">'*'</span>)</div><div class="line">                        match[i][j] = match[i][j] || match[i<span class="number">-1</span>][j];</div><div class="line">                    <span class="keyword">if</span>(secondc[j<span class="number">-1</span>] == <span class="string">'*'</span>)</div><div class="line">                        match[i][j] = match[i][j] || match[i][j<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">if</span> (secondc[j<span class="number">-1</span>] == <span class="string">'*'</span>)</div><div class="line">                            match[i][j] = match[i][j<span class="number">-1</span>];</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            match[i][j] = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">if</span> (firstc[i<span class="number">-1</span>] == <span class="string">'*'</span>)</div><div class="line">                            match[i][j] = match[i<span class="number">-1</span>][j];</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            match[i][j] = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(match[m][n])</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; Case &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="string">"TRUE"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; Case &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="string">"FALSE"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>单次算法时间复杂度为$\mathcal{O}(n^2)$，空间复杂度也为$\mathcal{O}(n^2)$。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法-数方块-Google kickstart2017 Round A - Problem A]]></title>
      <url>http://vectorliu.com/2017/03/05/algorithm-google-kickstart2017-roundA-problemA/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个r行c列的正方形组成的矩形，该形状内存在多少个正方形。</p>
<a id="more"></a> 
<p>原题描述如下：</p>
<blockquote>
<p>Mr. Panda has recently fallen in love with a new game called Square Off, in which players compete to find as many different squares as possible on an evenly spaced rectangular grid of dots. To find a square, a player must identify four dots that form the vertices of a square. Each side of the square must have the same length, of course, but it does not matter what that length is, and the square does not necessarily need to be aligned with the axes of the grid. The player earns one point for every different square found in this way. Two squares are different if and only if their sets of four dots are different.</p>
<p>Mr. Panda has just been given a grid with R rows and C columns of dots. How many different squares can he find in this grid? Since the number might be very large, please output the answer modulo $10^9 + 7 (1000000007)$.</p>
<p>Input</p>
<p>The first line of the input gives the number of test cases, T. T lines follow. Each line has two integers R and C: the number of dots in each row and column of the grid, respectively.<br>Output</p>
<p>For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the number of different squares can be found in the grid.<br>Limits</p>
<p>1 ≤ T ≤ 100.<br>Small dataset</p>
<p>2 ≤ R ≤ 1000.<br>2 ≤ C ≤ 1000.<br>Large dataset</p>
<p>2 ≤ R ≤ 109.<br>2 ≤ C ≤ 109.<br>Sample</p>
<p>Input </p>
<p>Output </p>
<p>4<br>2 4<br>3 4<br>4 4<br>1000 500</p>
<p>Case #1: 3<br>Case #2: 10<br>Case #3: 20<br>Case #4: 624937395</p>
</blockquote>
<h2 id="可能解法"><a href="#可能解法" class="headerlink" title="可能解法"></a>可能解法</h2><p>首先观察下列$4 \times 4$的网格图，对应边长为$3 \times 3$：<br><img src="/2017/03/05/algorithm-google-kickstart2017-roundA-problemA/squarecounting.png" alt="网格图"></p>
<p>我们可以发现：</p>
<ul>
<li>边长为1的正方形有$(r - 1)(c - 1)$个；</li>
<li>边长为2的正方形有$(r - 2)(c - 2)$个，此外每个边长为2的正方形内部有一个斜的边长为$\sqrt{2}$正方形，因此总数为$2(r - 2)(c - 2)$；</li>
<li>边长为3的正方形有$(r - 3)(c - 3)$个，此外每个边长为3的正方形内部有一个斜的边长为$\sqrt{5}$正方形，因此总数为$3(r - 3)(c - 3)$；</li>
<li>边长为n的正方形及其内部的正方形共有$n(r - n)(c - n)$个。</li>
</ul>
<p>同时，最大的边长n满足：$n = \min \lbrace r - 1, c - 1 \rbrace$。据此已经可以通过循环求和得到结果，但是针对大样本时间会来不及。因此我们考虑自行化简如下：<br>$$<br>\begin{align}\\<br>&amp;\sum\limits_{i=1}^{n}{i(r - i)(c - i)}\\<br>&amp;= rc \cdot \sum\limits_{i=1}^{n}{i} - (r + c) \cdot \sum\limits_{i=1}^{n}{i^2} + \sum\limits_{i=1}^{n}{i^3}\\<br>&amp;= \frac{n(n+1)}{2} \cdot rc - \frac{n(n+1)(2n+1)}{6} \cdot (r+c) + \frac{n^2(n+1)^2}{4}\\<br>\end{align}<br>$$<br>从而可以很方便的通过一次计算得到结果。最后，为了避免大数运算，需要在计算的过程中进行取模。要注意的是，由于中间有减法存在，需要检查最后的结果是否合法。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ifstream fin;</div><div class="line">    ofstream fout;</div><div class="line">    fin.open(<span class="string">"../A-large-practice.in"</span>);</div><div class="line">    fout.open(<span class="string">"../A-large.out"</span>);</div><div class="line">    <span class="keyword">int</span> <span class="keyword">module</span> = <span class="number">1000000007</span>;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    fin &gt;&gt; T;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> Case = <span class="number">1</span>; Case &lt;= T; Case++) &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> r, c;</div><div class="line">        fin &gt;&gt; r &gt;&gt; c;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> m = min(r - <span class="number">1</span>, c - <span class="number">1</span>);</div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> temp1 = r * c;</div><div class="line">        <span class="keyword">long</span> temp2 = r + c;</div><div class="line">        sum += ((m + <span class="number">1</span>)*m/<span class="number">2</span> * temp1)%<span class="keyword">module</span>;</div><div class="line">        sum += -((<span class="keyword">int</span>)(m + <span class="number">1</span>)*m*(<span class="number">2</span>*m + <span class="number">1</span>)/<span class="number">6</span> *temp2)%<span class="keyword">module</span>;</div><div class="line">        sum += ((m + <span class="number">1</span>)*(m + <span class="number">1</span>)*m*m/<span class="number">4</span>)%<span class="keyword">module</span>;</div><div class="line">        sum = sum%<span class="keyword">module</span>;</div><div class="line">        <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</div><div class="line">            sum += <span class="keyword">module</span>;</div><div class="line">        &#125;</div><div class="line">        fout &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; Case &lt;&lt; <span class="string">": "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    fin.close();</div><div class="line">    fout.close();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>算法时间复杂度为$\mathcal{O}(T)$，空间复杂度也为$\mathcal{O}(T)$。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法—分块最大值之差]]></title>
      <url>http://vectorliu.com/2017/03/05/algorithm-maximum-absolute-difference/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一维数组arr，其下标范围为$[0, n-1]$，将数组分为两个部分$[0, k]$和$[k+1, n-1]$，两部分都非空。求前后两部分最大值的差的绝对值的最大值。<br><a id="more"></a></p>
<h2 id="可能解法（python版）"><a href="#可能解法（python版）" class="headerlink" title="可能解法（python版）"></a>可能解法（python版）</h2><p>算法思想：首先，无论怎么分割，数组的全局最大值必然也是其中一部分的最大值。从数组头部开始看：</p>
<ul>
<li>如果$arr[0] \lt arr[1]$，则为保持左边的最大值最小，数组必须从从第一个元素后分段；</li>
<li>如果$arr[0] \ge arr[1]$，则新加入的$arr[1]$对左边的最大值无影响，直到再次满足上一个条件。<br>从尾部开始也可以得到类似的结论。因此，总结最大值之差的最大值满足如下表达式：<br>$$\max\lbrace arr \rbrace - \min \lbrace arr[0], arr[n - 1] \rbrace.$$</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDiff</span><span class="params">(arr)</span>:</span></div><div class="line">    n = len(arr)</div><div class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    maxVal = arr[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</div><div class="line">        maxVal = arr[i] <span class="keyword">if</span> maxVal &lt; arr[i] <span class="keyword">else</span> maxVal</div><div class="line">    <span class="keyword">return</span> maxVal - min(arr[<span class="number">0</span>], arr[n - <span class="number">1</span>])</div></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>算法时间复杂度为$\mathcal{O}(n)$，空间复杂度也为$\mathcal{O}(N)$。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法-四等分数组-阿里2017年研发工程师JAVA（实习生）编程笔试]]></title>
      <url>http://vectorliu.com/2017/03/02/algorithm-four-equal-partition/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一维数组arr，其元素都为正数，将其分为4个组，4个组的和分别相等，并且不包含分割位置的元素。判断给定数组是否符合该条件。<br><a id="more"></a> </p>
<h2 id="可能解法（python版）"><a href="#可能解法（python版）" class="headerlink" title="可能解法（python版）"></a>可能解法（python版）</h2><p>算法思想：将数组分为4个部分，共存在3个分界点。初始化3个分界点的合理位置，使得每一段都非空，同时初始化4个部分的和。从左边和右边开始扫描调整分界点位置，直到第1部分和第4部分相等。算法接着调整第2部分和第3部分，使得它们的部分和也相等。至此，可以比较第1段和第2段的和，如果满足第1段大于第2段，则不再有调整的可能，否则接着调整。算法利用了两个重要特征：</p>
<ul>
<li>数组中所有元素都是正数，因此加上一个数不会变小；</li>
<li>第1段和第4段的和都是从小往大递增的。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourPartition</span><span class="params">(arr)</span>:</span></div><div class="line">    first, second, third = <span class="number">1</span>, len(arr)/<span class="number">2</span>, len(arr) - <span class="number">2</span></div><div class="line">    sum1 = sum2 = sum3 = sum4 = <span class="number">0</span></div><div class="line">    <span class="comment"># requires only one sweep</span></div><div class="line">    sum1 += sum(arr[<span class="number">0</span>:first])</div><div class="line">    sum2 += sum(arr[(first + <span class="number">1</span>):second])</div><div class="line">    sum3 += sum(arr[(second + <span class="number">1</span>):third])</div><div class="line">    sum4 += sum(arr[third + <span class="number">1</span>:])</div><div class="line">    <span class="keyword">if</span> sum1 * sum2 * sum3 * sum4 == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(first &lt; second - <span class="number">1</span>) <span class="keyword">and</span> (second &lt; third - <span class="number">1</span>):</div><div class="line">    	<span class="comment">#sum1 and sum4, from small to large, until equal</span></div><div class="line">    	<span class="keyword">if</span> sum1 &lt; sum4:</div><div class="line">    	    sum1 += arr[first]</div><div class="line">    	    sum2 -= arr[first + <span class="number">1</span>]</div><div class="line">    	    first += <span class="number">1</span></div><div class="line">    	<span class="keyword">elif</span> sum1 &gt; sum4:</div><div class="line">    	    sum4 += arr[third]</div><div class="line">    	    sum3 -= arr[third - <span class="number">1</span>]</div><div class="line">    	    third -= <span class="number">1</span></div><div class="line">    	    <span class="comment">#sum1 == sum4</span></div><div class="line">    	<span class="keyword">else</span>:</div><div class="line">    	    <span class="keyword">if</span> sum2 &lt; sum3:</div><div class="line">    	        sum2 += arr[second]</div><div class="line">    	        sum3 -= arr[second + <span class="number">1</span>]</div><div class="line">    	        second += <span class="number">1</span></div><div class="line">    	    <span class="keyword">elif</span> sum2 &gt; sum3:</div><div class="line">    	        sum2 -= arr[second - <span class="number">1</span>]</div><div class="line">    	        sum3 += arr[second]</div><div class="line">    	        second -= <span class="number">1</span></div><div class="line">    	        <span class="comment">#sum2 == sum3</span></div><div class="line">    	    <span class="keyword">else</span>:</div><div class="line">    	        <span class="keyword">if</span> sum1 &lt; sum2:</div><div class="line">    	            sum1 += arr[first]</div><div class="line">    	            sum2 -= arr[first + <span class="number">1</span>]</div><div class="line">    	            first += <span class="number">1</span></div><div class="line">    	        <span class="keyword">elif</span> sum1 &gt; sum2:</div><div class="line">    	            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    	        <span class="comment">#sum1 == sum2</span></div><div class="line">    	        <span class="keyword">else</span>:</div><div class="line">    	            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>算法时间复杂度为$\mathcal{O}(n)$，空间复杂度也为$\mathcal{O}(N)$。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://vectorliu.com/2017/03/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a> </p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
