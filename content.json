{"meta":{"title":"Homepage of Vector Liu","subtitle":null,"description":null,"author":"Vector","url":"http://vectorliu.com"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2017-03-04T11:25:51.000Z","updated":"2017-03-04T11:36:28.000Z","comments":true,"path":"2017/03/04/hello-world/","link":"","permalink":"http://vectorliu.com/2017/03/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"算法-四等分数组-阿里2017年研发工程师JAVA（实习生）编程笔试","slug":"algorithm-four-equal-partition","date":"2017-03-02T12:13:36.000Z","updated":"2017-03-04T12:21:23.000Z","comments":true,"path":"2017/03/02/algorithm-four-equal-partition/","link":"","permalink":"http://vectorliu.com/2017/03/02/algorithm-four-equal-partition/","excerpt":"","text":"题目描述给定一维数组arr，其元素都为正数，将其分为4个组，4个组的和分别相等，并且不包含分割位置的元素。判断给定数组是否符合该条件。 可能解法（python版）123456789101112131415161718192021222324252627282930313233343536373839404142def fourPartition(arr): first, second, third = 1, len(arr)/2, len(arr) - 2 sum1 = sum2 = sum3 = sum4 = 0 # requires only one sweep sum1 += sum(arr[0:first]) sum2 += sum(arr[(first + 1):second]) sum3 += sum(arr[(second + 1):third]) sum4 += sum(arr[third + 1:]) while(first &lt; second - 1) and (second &lt; third - 1): #sum1 and sum4, from small to large, until equal if sum1 &lt; sum4: sum1 += arr[first] sum2 -= arr[first + 1] first += 1 elif sum1 &gt; sum4: sum4 += arr[third] sum3 -= arr[third - 1] third -= 1 #sum1 == sum4 else: if sum2 &lt; sum3: sum2 += arr[second] sum3 -= arr[second + 1] second += 1 elif sum2 &gt; sum3: sum2 -= arr[second - 1] sum3 += arr[second] second -= 1 #sum2 == sum3 else: if sum1 &lt; sum2: sum1 += arr[first] sum2 -= arr[first + 1] first += 1 elif sum1 &gt; sum2: return False #sum1 == sum2 else: return True return False 复杂度分析算法时间复杂度为N，空间复杂度也为N。","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://vectorliu.com/tags/算法/"}]}]}